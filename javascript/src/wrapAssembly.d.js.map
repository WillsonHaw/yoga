{"version":3,"file":"wrapAssembly.d.js","names":[],"sources":["wrapAssembly.d.ts"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nimport { Unit, Direction } from './generated/YGEnums.ts';\nimport YGEnums from './generated/YGEnums.ts';\nimport type { Align, Display, Edge, Errata, ExperimentalFeature, FlexDirection, Gutter, Justify, MeasureMode, Overflow, PositionType, Wrap } from './generated/YGEnums.ts';\ntype Layout = {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n    width: number;\n    height: number;\n};\ntype Size = {\n    width: number;\n    height: number;\n};\ntype Value = {\n    unit: Unit;\n    value: number;\n};\nexport type Config = {\n    free(): void;\n    isExperimentalFeatureEnabled(feature: ExperimentalFeature): boolean;\n    setExperimentalFeatureEnabled(feature: ExperimentalFeature, enabled: boolean): void;\n    setPointScaleFactor(factor: number): void;\n    getErrata(): Errata;\n    setErrata(errata: Errata): void;\n    useWebDefaults(): boolean;\n    setUseWebDefaults(useWebDefaults: boolean): void;\n};\nexport type DirtiedFunction = (node: Node) => void;\nexport type MeasureFunction = (width: number, widthMode: MeasureMode, height: number, heightMode: MeasureMode) => Size;\nexport type Node = {\n    calculateLayout(width: number | 'auto' | undefined, height: number | 'auto' | undefined, direction?: Direction): void;\n    copyStyle(node: Node): void;\n    free(): void;\n    freeRecursive(): void;\n    getAlignContent(): Align;\n    getAlignItems(): Align;\n    getAlignSelf(): Align;\n    getAspectRatio(): number;\n    getBorder(edge: Edge): number;\n    getChild(index: number): Node;\n    getChildCount(): number;\n    getComputedBorder(edge: Edge): number;\n    getComputedBottom(): number;\n    getComputedHeight(): number;\n    getComputedLayout(): Layout;\n    getComputedLeft(): number;\n    getComputedMargin(edge: Edge): number;\n    getComputedPadding(edge: Edge): number;\n    getComputedRight(): number;\n    getComputedTop(): number;\n    getComputedWidth(): number;\n    getDirection(): Direction;\n    getDisplay(): Display;\n    getFlexBasis(): Value;\n    getFlexDirection(): FlexDirection;\n    getFlexGrow(): number;\n    getFlexShrink(): number;\n    getFlexWrap(): Wrap;\n    getHeight(): Value;\n    getJustifyContent(): Justify;\n    getGap(gutter: Gutter): Value;\n    getMargin(edge: Edge): Value;\n    getMaxHeight(): Value;\n    getMaxWidth(): Value;\n    getMinHeight(): Value;\n    getMinWidth(): Value;\n    getOverflow(): Overflow;\n    getPadding(edge: Edge): Value;\n    getParent(): Node | null;\n    getPosition(edge: Edge): Value;\n    getPositionType(): PositionType;\n    getWidth(): Value;\n    insertChild(child: Node, index: number): void;\n    isDirty(): boolean;\n    isReferenceBaseline(): boolean;\n    markDirty(): void;\n    hasNewLayout(): boolean;\n    markLayoutSeen(): void;\n    removeChild(child: Node): void;\n    reset(): void;\n    setAlignContent(alignContent: Align): void;\n    setAlignItems(alignItems: Align): void;\n    setAlignSelf(alignSelf: Align): void;\n    setAspectRatio(aspectRatio: number | undefined): void;\n    setBorder(edge: Edge, borderWidth: number | undefined): void;\n    setDirection(direction: Direction): void;\n    setDisplay(display: Display): void;\n    setFlex(flex: number | undefined): void;\n    setFlexBasis(flexBasis: number | 'auto' | `${number}%` | undefined): void;\n    setFlexBasisPercent(flexBasis: number | undefined): void;\n    setFlexBasisAuto(): void;\n    setFlexDirection(flexDirection: FlexDirection): void;\n    setFlexGrow(flexGrow: number | undefined): void;\n    setFlexShrink(flexShrink: number | undefined): void;\n    setFlexWrap(flexWrap: Wrap): void;\n    setHeight(height: number | 'auto' | `${number}%` | undefined): void;\n    setIsReferenceBaseline(isReferenceBaseline: boolean): void;\n    setHeightAuto(): void;\n    setHeightPercent(height: number | undefined): void;\n    setJustifyContent(justifyContent: Justify): void;\n    setGap(gutter: Gutter, gapLength: number | undefined): Value;\n    setMargin(edge: Edge, margin: number | 'auto' | `${number}%` | undefined): void;\n    setMarginAuto(edge: Edge): void;\n    setMarginPercent(edge: Edge, margin: number | undefined): void;\n    setMaxHeight(maxHeight: number | `${number}%` | undefined): void;\n    setMaxHeightPercent(maxHeight: number | undefined): void;\n    setMaxWidth(maxWidth: number | `${number}%` | undefined): void;\n    setMaxWidthPercent(maxWidth: number | undefined): void;\n    setDirtiedFunc(dirtiedFunc: DirtiedFunction | null): void;\n    setMeasureFunc(measureFunc: MeasureFunction | null): void;\n    setMinHeight(minHeight: number | `${number}%` | undefined): void;\n    setMinHeightPercent(minHeight: number | undefined): void;\n    setMinWidth(minWidth: number | `${number}%` | undefined): void;\n    setMinWidthPercent(minWidth: number | undefined): void;\n    setOverflow(overflow: Overflow): void;\n    setPadding(edge: Edge, padding: number | `${number}%` | undefined): void;\n    setPaddingPercent(edge: Edge, padding: number | undefined): void;\n    setPosition(edge: Edge, position: number | `${number}%` | undefined): void;\n    setPositionPercent(edge: Edge, position: number | undefined): void;\n    setPositionType(positionType: PositionType): void;\n    setWidth(width: number | 'auto' | `${number}%` | undefined): void;\n    setWidthAuto(): void;\n    setWidthPercent(width: number | undefined): void;\n    unsetDirtiedFunc(): void;\n    unsetMeasureFunc(): void;\n    setAlwaysFormsContainingBlock(alwaysFormsContainingBlock: boolean): void;\n};\nexport type Yoga = {\n    Config: {\n        create(): Config;\n        destroy(config: Config): void;\n    };\n    Node: {\n        create(config?: Config): Node;\n        createDefault(): Node;\n        createWithConfig(config: Config): Node;\n        destroy(node: Node): void;\n    };\n} & typeof YGEnums;\nexport default function wrapAssembly(lib: any): Yoga;\nexport {};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA+IA"}